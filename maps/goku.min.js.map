{"version":3,"sources":["goku.js","transition.js"],"names":["exports","isObjectEmpty","obj","key","hasOwnProperty","newId","gokuIndex","goku","element","Error","document","querySelector","elements","dataset","gokuId","id","Transition","onstart","requestId","requestAnimationFrame","step","oncomplete","cancelAnimationFrame","timestamp","window","webkitRequestAnimationFrame","mozRequestAnimationFrame","callback","setTimeout","webkitCancelAnimationFrame","mozCancelAnimationFrame","clearTimeout","options","this","queue","timings","playingIndex","elapsedTime","lastTimestamp","isPaused","promiseQueue","animate","bind","delay","pause","DEFAULT_DURATION","DEFAULT_EASING","prototype","_generateTransform","value","originalTransform","getComputedStyle","transform","style","_generateTransformByMatrix","addClass","args","Array","slice","call","arguments","properties","transitionPropertyArray","push","transitionProperty","join","duration","that","task","start","transitionDuration","transitionTimingFunction","easing","offsetWidth","length","promiseTask","promise","Promise","resolve","reject","time","console","log","reset","next","end","_next","complete","before","_clear"],"mappings":"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","file":"goku.min.js","sourcesContent":["/* global Transition */\n(function (exports) {\n  'use strict';\n\n  var requestId;\n\n  var elements = {};\n\n  var gokuIndex = 0;\n\n  var requestAnimationFrame = window.requestAnimationFrame ||\n                              window.webkitRequestAnimationFrame ||\n                              window.mozRequestAnimationFrame ||\n                              function fakeAnimationFrame(callback) {\n                                return window.setTimeout(callback, 1000 / 60);\n                              };\n  var cancelAnimationFrame = window.cancelAnimationFrame ||\n                             window.webkitCancelAnimationFrame ||\n                             window.mozCancelAnimationFrame ||\n                             function fakeAnimationFrame(id) {\n                               window.clearTimeout(id);\n                             };\n\n\n  function isObjectEmpty(obj) {\n    if (!obj) {\n      return true;\n    }\n\n    for (var key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  function newId () {\n    return 'goku-' + gokuIndex++;\n  }\n\n  function goku (element) {\n    if (!element) {\n      throw new Error('Goku: no argument');\n    }\n\n    if (typeof element === 'string') {\n      element = document.querySelector(element);\n    }\n\n    if (!element) {\n      throw new Error('Goku: no element found');\n    }\n\n    if (elements[element.dataset.gokuId]) {\n      return elements[element.dataset.gokuId];\n    }\n\n    // Use MutationObserver to release the obj when done\n    // https://developer.mozilla.org/en/docs/Web/API/MutationObserver\n    // https://hacks.mozilla.org/2012/05/dom-mutationobserver-reacting-to-dom-changes-without-killing-browser-performance/\n    // http://jsbin.com/yeferi/1/edit?html,js,console,output\n\n    // var that = this;\n    var id = newId();\n\n    element.dataset.gokuId = id;\n\n    elements[id] = new Transition(element, {\n      id: id,\n      onstart: function () {\n        if (!requestId) {\n          requestId = requestAnimationFrame(step);\n        }\n      },\n      oncomplete: function (element) {\n        var id = element.dataset.gokuId;\n        delete element.dataset.gokuId;\n        delete elements[id];\n        if (isObjectEmpty(elements)) {\n          cancelAnimationFrame(requestId);\n          requestId = null;\n        }\n      }\n    });\n\n    return elements[id];\n  }\n\n  /**\n   * The main and only loop for monitoring animated elements.\n   * @param  {[type]} timestamp [description]\n   * @return {[type]}           [description]\n   */\n  function step (timestamp) {\n    for (var key in elements) {\n      if (elements[key].step) {\n        elements[key].step(timestamp);\n      }\n    }\n\n    requestId = requestAnimationFrame(step);\n  }\n\n  exports.goku = goku;\n\n})(window);\n","(function (exports) {\n  'use strict';\n\n  // var TRANSITION_FINISH_THRESHOLD = 0;\n  var DEFAULT_DURATION = 400;\n  var DEFAULT_EASING = 'ease';\n\n  function Transition (element, options) {\n    // Currently only support ES6 Promise, add support for various promise implementations later.\n    options = options || {};\n    this.element = element;\n    this.id = options.id;\n    this.onstart = options.onstart;\n    this.oncomplete = options.oncomplete;\n\n    // this.element.style.transitionProperty = 'transform';\n    // log purpose only\n    // this.element.addEventListener('transitionend', function (evt) {\n    //   console.log('transitionend', evt);\n    // });\n\n    this.queue = [];\n    this.timings = [];\n    this.playingIndex = -1;\n    this.elapsedTime = 0;\n    this.lastTimestamp = 0;\n    this.isPaused = false;\n    this.requestId = null;\n    this.promiseQueue = [];\n\n    this.animate = this.animate.bind(this);\n    this.delay = this.animate.bind(this);\n    this.pause = this.pause.bind(this);\n  }\n\n  Transition.prototype = {\n\n    /**\n     * Update the transform value of an element by chaining the original and the new transform values.\n     * @param  {[type]} element [description]\n     * @param  {[type]} value   [description]\n     * @return {[type]}         [description]\n     */\n    _generateTransform: function (element, value) {\n      var originalTransform = getComputedStyle(element).transform;\n      if (originalTransform === 'none') {\n        element.style.transform = value;\n      } else {\n        element.style.transform = originalTransform + ' ' + value;\n      }\n    },\n\n    /**\n     * Maybe try this approach later for performance comparisons.\n     * @param  {[type]} element [description]\n     * @param  {[type]} value   [description]\n     * @return {[type]}         [description]\n     */\n    _generateTransformByMatrix: function (/*element, value*/) {\n      // If transform was applied on the element\n        // Get orinial transform matrix\n        // Get new transform matrix\n        // Compute the result transform matrix\n      // Else, set the value directly\n\n    },\n\n    addClass: function (/*className*/) {},\n\n    /**\n     * By default the animate calls are queued.\n     * @return {[type]} [description]\n     */\n    animate: function () {\n      // Optimize this later\n      // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments\n      var args = Array.prototype.slice.call(arguments);\n      if (!args[0]) {\n        throw new Error('Goku: missing arguments!');\n      }\n\n      if (typeof args[0] === 'string') {\n        // Run animation by adding CSS class\n        throw new Error('Goku: implement this!');\n      }\n\n      if (typeof args[0] === 'object') {\n        var properties = args[0];\n        var options = args[1] || {};\n\n        var transitionPropertyArray = [];\n        for (var key in properties) {\n          transitionPropertyArray.push(key);\n        }\n        var transitionProperty = transitionPropertyArray.join(' ');\n        var duration = options.duration || DEFAULT_DURATION;\n        this.timings.push(duration);\n\n        var that = this;\n        var task = {\n          options: options,\n          start: function () {\n            that.element.style.transitionProperty = transitionProperty;\n            that.element.style.transitionDuration = duration + 'ms';\n            that.element.style.transitionTimingFunction = options.easing || DEFAULT_EASING;\n            // Workaround for triggering a transition.\n            // http://stackoverflow.com/questions/24148403/trigger-css-transition-on-appended-element\n            /* jshint -W030 */\n            that.element.offsetWidth;\n            for (var key in properties) {\n              if (key === 'transform') {\n                // Although this is helpful, but it contradicts the principle of CSS rules.\n                // that._generateTransform(that.element, properties[key]);\n                that.element.style[key] = properties[key];\n              } else {\n                that.element.style[key] = properties[key];\n              }\n            }\n\n            if (options.start) {\n              options.start();\n            }\n          }\n        };\n\n        this.queue.push(task);\n        if (this.queue.length === 1) {\n          that.onstart();\n        }\n\n        var promiseTask = {};\n        var promise = new Promise(function (resolve, reject) {\n          promiseTask.resolve = resolve;\n          promiseTask.reject = reject;\n        });\n        promise.animate = this.animate;\n        promise.delay = this.delay;\n        promise.pause = this.pause;\n        promiseTask.promise = promise;\n        this.promiseQueue.push(promiseTask);\n\n        return promise;\n      }\n    },\n\n    delay: function (time) {\n      if (time > 0) {\n        this.queue.push(function () {});\n        this.timings.push(time);\n      } else {\n        throw new Error('Goku: missing arguments!');\n      }\n\n      return this;\n    },\n\n    pause: function () {\n      console.log('pause');\n      this.isPaused = true;\n\n      return this;\n    },\n\n    reset: function () {},\n\n    next: function () {},\n\n    /**\n     * End the animation immediately.\n     * @return {[type]} [description]\n     */\n    end: function () {\n\n      return this;\n    },\n\n    step: function (timestamp) {\n      // timestamp is started when page loaded, reset the elapsed time first\n      if (!this.isPaused && this.lastTimestamp) {\n        this.elapsedTime += timestamp - this.lastTimestamp;\n      }\n      this.lastTimestamp = timestamp;\n\n      if (this.playingIndex === -1) {\n        this._next();\n        return;\n      }\n\n      if (!this.isPaused) {\n        // console.log('step', this.id, this.elapsedTime);\n      }\n\n      if (this.elapsedTime > this.timings[this.playingIndex]) {\n        var task = this.queue[this.playingIndex];\n        if (typeof task.options.complete === 'function') {\n          task.options.complete();\n        }\n        var promiseTask = this.promiseQueue[this.playingIndex];\n        promiseTask.resolve();\n        this._next();\n      }\n    },\n\n    _next: function () {\n      this.playingIndex += 1;\n\n      if (this.queue[this.playingIndex]) {\n        console.log(this.id, 'next');\n\n        var task = this.queue[this.playingIndex];\n        if (typeof task.options.before === 'function') {\n          task.options.before();\n        }\n        task.start();\n\n        this.elapsedTime = 0;\n        this.lastTimestamp = 0;\n\n      } else {\n        console.log(this.id, 'end');\n        this._clear();\n        this.oncomplete(this.element);\n      }\n    },\n\n    _clear: function () {\n      console.log(this.id, 'clear');\n      this.playingIndex = -1;\n      this.queue.length = 0;\n      this.timings.length = 0;\n      this.elapsedTime = 0;\n      this.lastTimestamp = 0;\n      this.requestId = null;\n    }\n  };\n\n  exports.Transition = Transition;\n\n})(window);\n"],"sourceRoot":"/source/"}